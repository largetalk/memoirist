Java
=====================

*表达式匹配*

如果要跨行匹配，可以这样："(?s)XXXXXXXX"，就是在你表达式前加"(?s)"

or

> Pattern.compile(reg, Pattern.DOTALL);

*equals*

使用equals而不是==

break label; //跳出外循环
continue label; //跳到外循环

*原生类*

java有6个基本数据类型，byte--8位，short--16位，int--32位，long--64位，float--32位，double--64位

*分布式与集群*

分布式：一个业务分拆多个子业务，部署在不同的服务器上
集群：同一个业务，部署在多个服务器上

集群是个物理形态，分布式是个工作方式。
只要是一堆机器，就可以叫集群，他们是不是一起协作着干活，这个谁也不知道；一个程序或系统，只要运行在不同的机器上，就可以叫分布式，
集群一般是物理集中、统一管理的，而分布式系统则不强调这一点
集群可能运行着一个或多个分布式系统，也可能根本没有运行分布式系统；分布式系统可能运行在一个集群上，也可能运行在不属于一个集群的多台（2台也算多台）机器上。
集群强调的是任务的同一性，分布式强调的是差异性
分布式是指将不同的业务分布在不同的地方。 而集群指的是将几台服务器集中在一起，实现同一业务

*多线程*

并行：多个cpu实例或者多台机器同时执行一段处理逻辑，是真正的同时。
并发：通过cpu调度算法，让用户看上去同时执行，实际上从cpu操作层面不是真正的同时。
线程安全：经常用来描绘一段代码。指在并发的情况之下，该代码经过多线程使用，线程的调度顺序不影响任何结果。
同步：Java中的同步指的是通过人为的控制和调度，保证共享资源的多线程访问成为线程安全，来保证结果的准确。

 线程的状态：New, Runnable, Running, Blocked, Waiting, Timed_waiting, terminated

 Java中的每个对象都有一个监视器，来监测并发代码的重入。在非多线程编码时该监视器不发挥作用，反之如果在synchronized 范围内，监视器发挥作用。

 多线程的内存模型：main memory（主存）、working memory（线程栈），在处理数据时，线程会把值从主存load到本地栈，完成操作后再save回去(volatile关键词的作用：每次针对该变量的操作都激发一次load and save)。